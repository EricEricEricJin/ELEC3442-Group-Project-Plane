######################################################
# File hand-written by human: ericericericjin@github
######################################################
# style inspired by Makefile generated by STM32CubeMX

CC = gcc
COMPILE_FLAGS = -O3 -std=c2x

######################################
# target
######################################
TARGET = plane

######################################
# building variables
######################################
# debug build?
DEBUG = 0
# optimization
OPT = -O3


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =		  	 \
main.c				 \
algorithms/pid.c     \
application/communicate.c   \
application/ctrl_surface.c   \
application/init.c   \
application/plane_task.c   \
application/sensor_task.c   \
bsp/ads7830.c 			 \
bsp/pca9685.c 			 \
bsp/pisystem.c 			 \
bsp/board.c 			 \
communication/communication.c \
communication/crc16.c \
components/bmp280.c	 \
components/esc.c	 \
components/jy901.c	 \
components/servo.c	 \
support/shared_mem.c


#######################################
# binaries
#######################################
CC = gcc


#######################################
# CFLAGS
#######################################
C_INCLUDES =    \
-Ialgorithms    \
-Iapplication   \
-Ibsp 		    \
-Icommunication \
-Icomponents	\
-Icomponents/bmp280 \
-Icomponents/imu    \
-Isupport

C_DEFS = -DRASPBERRYPI

CFLAGS = $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall
ifeq ($(DEBUG), 1)
CFLAGS += -g
endif

#######################################
# LDFLAGS
#######################################
LIBS = -lwiringPi -lpthread -lm
LIBDIR = 
LDFLAGS = $(LIBDIR) $(LIBS)

# .PHONY: all create_build \
# 	 	build_bsp build_components \
# 		build_communication build_algorithms \
# 		build_application

# all: create_build build_bsp build_components \
# 	 build_communication build_algorithms \
# 	 build_application build/main

# create_build:
# 	if ! [ -d build ]; then mkdir build; fi;

INCLUDE_FLAGS = -I bsp/
LINK_LIBS = -lwiringPi
LDFLAGS = $(LIBDIR) $(LIBS)


# default action: build all
all: $(BUILD_DIR)/$(TARGET)

#######################################
# build the application
#######################################
# $(dir names...) Extracts the directory-part of each file name in names

# $(notdir names...) Extracts all but the directory-part of each file name in names. 

# (addprefix prefix,namesâ€¦) The argument names is regarded as a series of names, separated by whitespace; prefix is used as a unit. 
# The value of prefix is prepended to the front of each individual name and the resulting larger names are concatenated with single spaces between them. 

# vpath Specify the search path directories for file names that match pattern

# $(sort list) Sorts the words of list in lexical order, removing duplicate words. 

# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))

# (foobar: foo | bar) bar must be built before foobar, but that foobar won't be considered out of date because bar is newer than foobar.

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET): $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	
$(BUILD_DIR):
	mkdir $@

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
